### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

type Blog {
  authors(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  id: Int!
  name: String!
  posts(orderBy: PostOrderByInput, where: BlogPostsWhereInput): [CustomPost!]!
  viewCount: Int!
}

input BlogCreateInput {
  authors: UserCreateManyWithoutBlogInput
  createdAt: DateTime
  name: String!
  posts: PostCreateManyWithoutBlogInput
  updatedAt: DateTime
  viewCount: Int
}

input BlogCreateOneWithoutAuthorsInput {
  connect: BlogWhereUniqueInput
  create: BlogCreateWithoutAuthorsInput
}

input BlogCreateOneWithoutPostsInput {
  connect: BlogWhereUniqueInput
  create: BlogCreateWithoutPostsInput
}

input BlogCreateWithoutAuthorsInput {
  createdAt: DateTime
  name: String!
  posts: PostCreateManyWithoutBlogInput
  updatedAt: DateTime
  viewCount: Int
}

input BlogCreateWithoutPostsInput {
  authors: UserCreateManyWithoutBlogInput
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
  viewCount: Int
}

input BlogPostsWhereInput {
  title: StringFilter
}

input BlogUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
  viewCount: Int
}

input BlogWhereInput {
  AND: [BlogWhereInput!]
  authors: UserFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  NOT: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  posts: PostFilter
  updatedAt: DateTimeFilter
  viewCount: IntFilter
}

input BlogWhereUniqueInput {
  id: Int
}

type CustomPost {
  id: Int!
  status: PostStatus!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneBlog(data: BlogCreateInput!): Blog!
  updateManyBlog(data: BlogUpdateManyMutationInput!, where: BlogWhereInput): BatchPayload!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

input PostCreateManyWithoutBlogInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutBlogInput!]
}

input PostCreateManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutUserInput!]
}

input PostCreateWithoutBlogInput {
  status: PostStatus!
  tags: TagCreateManyWithoutPostsInput
  title: String!
  User: UserCreateOneWithoutPostsInput
}

input PostCreateWithoutUserInput {
  blog: BlogCreateOneWithoutPostsInput
  status: PostStatus!
  tags: TagCreateManyWithoutPostsInput
  title: String!
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  blogId: OrderByArg
  id: OrderByArg
  status: OrderByArg
  title: OrderByArg
  userId: OrderByArg
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

input PostWhereInput {
  AND: [PostWhereInput!]
  blog: BlogWhereInput
  blogId: NullableIntFilter
  id: IntFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  status: PostStatus
  tags: TagFilter
  title: StringFilter
  User: UserWhereInput
  userId: NullableIntFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  blog(id: Int!): Blog
  blogs: [Blog!]!
  blogsLike(name: String, viewCount: Int): [Blog!]
  people(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, where: UserWhereInput): [User!]!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: PostOrderByInput, where: PostWhereInput): [CustomPost!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Tag {
  id: Int!
  label: String
}

input TagCreateManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostsInput!]
}

input TagCreateWithoutPostsInput {
  label: String!
}

input TagFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  id: IntFilter
  label: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  posts: PostFilter
}

input TagWhereUniqueInput {
  id: Int
}

type User {
  blog: Blog
  id: Int!
  isLongName: Boolean
  name: String
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [CustomPost!]!
  role: UserRole!
}

input UserCreateManyWithoutBlogInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutBlogInput!]
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutBlogInput {
  createdAt: DateTime
  name: String
  posts: PostCreateManyWithoutUserInput
  rating: Float!
  role: UserRole!
  updatedAt: DateTime
}

input UserCreateWithoutPostsInput {
  blog: BlogCreateOneWithoutAuthorsInput
  createdAt: DateTime
  name: String
  rating: Float!
  role: UserRole!
  updatedAt: DateTime
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

enum UserRole {
  ADMIN
  AUTHOR
}

input UserWhereInput {
  AND: [UserWhereInput!]
  blog: BlogWhereInput
  blogId: NullableIntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts: PostFilter
  rating: FloatFilter
  role: UserRole
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  id: Int
}
